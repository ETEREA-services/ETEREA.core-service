package eterea.core.service.kotlin.model.dto

import eterea.core.service.kotlin.model.Comprobante

data class ComprobanteDto(
    var comprobanteId: Int? = null,
    var descripcion: String = "",
    var negocioId: Int? = null,
    var modulo: Int? = null,
    var stock: Byte = 0,
    var rendicion: Byte = 0,
    var ordenPago: Byte = 0,
    var aplicaPendiente: Byte = 0,
    var cuentaCorriente: Byte = 0,
    var debita: Byte = 0,
    var iva: Byte = 0,
    var ganancias: Byte = 0,
    var aplicable: Byte = 0,
    var libroIva: Byte = 0,
    var letraComprobante: String? = null,
    var recibo: Byte = 0,
    var contado: Byte = 0,
    var transferencia: Byte = 0,
    var imprime: Byte = 0,
    var comprobanteIdAnulacion: Int? = null,
    var centroStockIdEntrega: Int? = null,
    var centroStockIdRecibe: Int? = null,
    var diasVigencia: Int? = null,
    var concepto: Byte = 0,
    var personal: Byte = 0,
    var comanda: Byte = 0,
    var puntoVenta: Int = 0,
    var codigoMozo: Byte = 0,
    var transferir: Byte = 0,
    var numeroCuenta: Long? = null,
    var nivel: Int = 0,
    var fiscalizadora: Byte = 0,
    var invisible: Byte = 0,
    var comprobanteAfipId: Int? = null,
    var facturaElectronica: Byte = 0,
    var asociado: Byte = 0,
    var cuenta: CuentaDto? = null
) {
    companion object {
        fun fromEntity(comprobante: Comprobante) = ComprobanteDto(
            comprobanteId = comprobante.comprobanteId,
            descripcion = comprobante.descripcion,
            negocioId = comprobante.negocioId,
            modulo = comprobante.modulo,
            stock = comprobante.stock,
            rendicion = comprobante.rendicion,
            ordenPago = comprobante.ordenPago,
            aplicaPendiente = comprobante.aplicaPendiente,
            cuentaCorriente = comprobante.cuentaCorriente,
            debita = comprobante.debita,
            iva = comprobante.iva,
            ganancias = comprobante.ganancias,
            aplicable = comprobante.aplicable,
            libroIva = comprobante.libroIva,
            letraComprobante = comprobante.letraComprobante,
            recibo = comprobante.recibo,
            contado = comprobante.contado,
            transferencia = comprobante.transferencia,
            imprime = comprobante.imprime,
            comprobanteIdAnulacion = comprobante.comprobanteIdAnulacion,
            centroStockIdEntrega = comprobante.centroStockIdEntrega,
            centroStockIdRecibe = comprobante.centroStockIdRecibe,
            diasVigencia = comprobante.diasVigencia,
            concepto = comprobante.concepto,
            personal = comprobante.personal,
            comanda = comprobante.comanda,
            puntoVenta = comprobante.puntoVenta,
            codigoMozo = comprobante.codigoMozo,
            transferir = comprobante.transferir,
            numeroCuenta = comprobante.numeroCuenta,
            nivel = comprobante.nivel,
            fiscalizadora = comprobante.fiscalizadora,
            invisible = comprobante.invisible,
            comprobanteAfipId = comprobante.comprobanteAfipId,
            facturaElectronica = comprobante.facturaElectronica,
            asociado = comprobante.asociado,
            cuenta = comprobante.cuenta?.let { CuentaDto.fromEntity(it) }
        )
    }

    fun toEntity() = Comprobante(
        comprobanteId = this.comprobanteId,
        descripcion = this.descripcion,
        negocioId = this.negocioId,
        modulo = this.modulo,
        stock = this.stock,
        rendicion = this.rendicion,
        ordenPago = this.ordenPago,
        aplicaPendiente = this.aplicaPendiente,
        cuentaCorriente = this.cuentaCorriente,
        debita = this.debita,
        iva = this.iva,
        ganancias = this.ganancias,
        aplicable = this.aplicable,
        libroIva = this.libroIva,
        letraComprobante = this.letraComprobante,
        recibo = this.recibo,
        contado = this.contado,
        transferencia = this.transferencia,
        imprime = this.imprime,
        comprobanteIdAnulacion = this.comprobanteIdAnulacion,
        centroStockIdEntrega = this.centroStockIdEntrega,
        centroStockIdRecibe = this.centroStockIdRecibe,
        diasVigencia = this.diasVigencia,
        concepto = this.concepto,
        personal = this.personal,
        comanda = this.comanda,
        puntoVenta = this.puntoVenta,
        codigoMozo = this.codigoMozo,
        transferir = this.transferir,
        numeroCuenta = this.numeroCuenta,
        nivel = this.nivel,
        fiscalizadora = this.fiscalizadora,
        invisible = this.invisible,
        comprobanteAfipId = this.comprobanteAfipId,
        facturaElectronica = this.facturaElectronica,
        asociado = this.asociado,
        cuenta = this.cuenta?.toEntity()
    )
}
